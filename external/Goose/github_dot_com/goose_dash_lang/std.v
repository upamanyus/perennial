(* autogenerated from github.com/goose-lang/std *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_dot_com.tchajed.goose.machine.
From Goose Require sync.

Section code.
Context `{ext_ty: ext_types}.
Local Coercion Var' s: expr := Var s.

(* Test if the two byte slices are equal. *)
Definition BytesEqual: val :=
  rec: "BytesEqual" "x" "y" :=
    let: "xlen" := slice.len "x" in
    (if: "xlen" ≠ (slice.len "y")
    then #false
    else
      let: "i" := ref_to uint64T #0 in
      let: "retval" := ref_to boolT #true in
      Skip;;
      (for: (λ: <>, (![uint64T] "i") < "xlen"); (λ: <>, Skip) := λ: <>,
        (if: (SliceGet byteT "x" (![uint64T] "i")) ≠ (SliceGet byteT "y" (![uint64T] "i"))
        then
          "retval" <-[boolT] #false;;
          Break
        else
          "i" <-[uint64T] ((![uint64T] "i") + #1);;
          Continue));;
      ![boolT] "retval").

(* Compute the sum of two numbers, `Assume`ing that this does not overflow.
   *Use with care*, assumptions are trusted and should be justified! *)
Definition SumAssumeNoOverflow: val :=
  rec: "SumAssumeNoOverflow" "x" "y" :=
    machine.Assume (("x" + "y") ≥ "x");;
    "x" + "y".

Definition Multipar: val :=
  rec: "Multipar" "num" "op" :=
    let: "num_left" := ref_to uint64T "num" in
    let: "num_left_mu" := struct.alloc sync.Mutex (zero_val (struct.t sync.Mutex)) in
    let: "num_left_cond" := sync.NewCond "num_left_mu" in
    let: "i" := ref_to uint64T #0 in
    (for: (λ: <>, (![uint64T] "i") < "num"); (λ: <>, "i" <-[uint64T] ((![uint64T] "i") + #1)) := λ: <>,
      let: "i" := ![uint64T] "i" in
      Fork ("op" "i";;
            sync.Mutex__Lock "num_left_mu";;
            "num_left" <-[uint64T] ((![uint64T] "num_left") - #1);;
            sync.Cond__Signal "num_left_cond";;
            sync.Mutex__Unlock "num_left_mu");;
      Continue);;
    sync.Mutex__Lock "num_left_mu";;
    Skip;;
    (for: (λ: <>, (![uint64T] "num_left") > #0); (λ: <>, Skip) := λ: <>,
      sync.Cond__Wait "num_left_cond";;
      Continue);;
    sync.Mutex__Unlock "num_left_mu";;
    #().

End code.
