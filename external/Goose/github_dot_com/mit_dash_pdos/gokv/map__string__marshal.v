(* autogenerated from github.com/mit-pdos/gokv/map_string_marshal *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_dot_com.tchajed.marshal.

Section code.
Context `{ext_ty: ext_types}.
Local Coercion Var' s: expr := Var s.

Definition EncodeStringMap: val :=
  rec: "EncodeStringMap" "kvs" :=
    let: "enc" := ref_to (slice.T byteT) (NewSlice byteT #0) in
    let: "$a0" := marshal.WriteInt (![slice.T byteT] "enc") (MapLen (![mapT stringT] "kvs")) in
    "enc" <-[slice.T byteT] "$a0";;
    MapIter (![mapT stringT] "kvs") (位: "k" "v",
      let: "$a0" := marshal.WriteInt (![slice.T byteT] "enc") (StringLength (![stringT] "k")) in
      "enc" <-[slice.T byteT] "$a0";;
      let: "$a0" := marshal.WriteBytes (![slice.T byteT] "enc") (StringToBytes (![stringT] "k")) in
      "enc" <-[slice.T byteT] "$a0";;
      let: "$a0" := marshal.WriteInt (![slice.T byteT] "enc") (StringLength (![stringT] "v")) in
      "enc" <-[slice.T byteT] "$a0";;
      let: "$a0" := marshal.WriteBytes (![slice.T byteT] "enc") (StringToBytes (![stringT] "v")) in
      "enc" <-[slice.T byteT] "$a0";;
      #());;
    return: (![slice.T byteT] "enc").

Definition DecodeStringMap: val :=
  rec: "DecodeStringMap" "enc_in" :=
    let: "enc" := ref_to (slice.T byteT) (![slice.T byteT] "enc_in") in
    let: "numEntries" := ref (zero_val uint64T) in
    let: "kvs" := ref_zero (mapT stringT) in
    let: "$a0" := NewMap stringT stringT #() in
    "kvs" <-[mapT stringT] "$a0";;
    let: ("$a0", "$a1") := marshal.ReadInt (![slice.T byteT] "enc") in
    "enc" <-[slice.T byteT] "$a1";;
    "numEntries" <-[uint64T] "$a0";;
    let: "numEntries2" := ref_zero uint64T in
    let: "$a0" := ![uint64T] "numEntries" in
    "numEntries2" <-[uint64T] "$a0";;
    (let: "i" := ref_zero uint64T in
    let: "$a0" := #0 in
    "i" <-[uint64T] "$a0";;
    (for: (位: <>, (![uint64T] "i") < (![uint64T] "numEntries2")); (位: <>, "i" <-[uint64T] ((![uint64T] "i") + #1);;
    #()) := 位: <>,
      let: "ln" := ref (zero_val uint64T) in
      let: "key" := ref (zero_val (slice.T byteT)) in
      let: "val" := ref (zero_val (slice.T byteT)) in
      let: ("$a0", "$a1") := marshal.ReadInt (![slice.T byteT] "enc") in
      "enc" <-[slice.T byteT] "$a1";;
      "ln" <-[uint64T] "$a0";;
      let: ("$a0", "$a1") := marshal.ReadBytes (![slice.T byteT] "enc") (![uint64T] "ln") in
      "enc" <-[slice.T byteT] "$a1";;
      "key" <-[slice.T byteT] "$a0";;
      let: ("$a0", "$a1") := marshal.ReadInt (![slice.T byteT] "enc") in
      "enc" <-[slice.T byteT] "$a1";;
      "ln" <-[uint64T] "$a0";;
      let: ("$a0", "$a1") := marshal.ReadBytes (![slice.T byteT] "enc") (![uint64T] "ln") in
      "enc" <-[slice.T byteT] "$a1";;
      "val" <-[slice.T byteT] "$a0";;
      let: "$a0" := StringFromBytes (![slice.T byteT] "val") in
      MapInsert (![mapT stringT] "kvs") (StringFromBytes (![slice.T byteT] "key")) "$a0";;
      #())).

End code.
