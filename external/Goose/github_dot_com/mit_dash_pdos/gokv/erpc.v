(* autogenerated from github.com/mit-pdos/gokv/erpc *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_dot_com.goose_dash_lang.std.
From Goose Require github_dot_com.tchajed.marshal.
From Goose Require sync.

Section code.
Context `{ext_ty: ext_types}.
Local Coercion Var' s: expr := Var s.

(* Implements "exactly-once RPCs" with a reply table. *)

Definition Server := struct.decl [
  "mu" :: ptrT;
  "lastSeq" :: mapT uint64T;
  "lastReply" :: mapT (slice.T byteT);
  "nextCID" :: uint64T
].

Definition Server__HandleRequest: val :=
  rec: "Server__HandleRequest" "t" "handler" :=
    (λ: "raw_args" "reply",
      let: ("cid", "raw_args") := marshal.ReadInt "raw_args" in
      let: ("seq", "raw_args") := marshal.ReadInt "raw_args" in
      sync.Mutex__Lock (struct.loadF Server "mu" "t");;
      let: "last" := Fst (MapGet (struct.loadF Server "lastSeq" "t") "cid") in
      (if: "seq" ≤ "last"
      then
        "reply" <-[slice.T byteT] (Fst (MapGet (struct.loadF Server "lastReply" "t") "cid"));;
        sync.Mutex__Unlock (struct.loadF Server "mu" "t");;
        #()
      else
        "handler" "raw_args" "reply";;
        MapInsert (struct.loadF Server "lastSeq" "t") "cid" "seq";;
        MapInsert (struct.loadF Server "lastReply" "t") "cid" (![slice.T byteT] "reply");;
        sync.Mutex__Unlock (struct.loadF Server "mu" "t");;
        #())
      ).

Definition Server__GetFreshCID: val :=
  rec: "Server__GetFreshCID" "t" :=
    sync.Mutex__Lock (struct.loadF Server "mu" "t");;
    let: "r" := struct.loadF Server "nextCID" "t" in
    struct.storeF Server "nextCID" "t" (std.SumAssumeNoOverflow (struct.loadF Server "nextCID" "t") #1);;
    sync.Mutex__Unlock (struct.loadF Server "mu" "t");;
    "r".

Definition MakeServer: val :=
  rec: "MakeServer" <> :=
    let: "t" := struct.alloc Server (zero_val (struct.t Server)) in
    struct.storeF Server "lastReply" "t" (NewMap uint64T (slice.T byteT) #());;
    struct.storeF Server "lastSeq" "t" (NewMap uint64T uint64T #());;
    struct.storeF Server "nextCID" "t" #0;;
    struct.storeF Server "mu" "t" (struct.alloc sync.Mutex (zero_val (struct.t sync.Mutex)));;
    "t".

Definition Client := struct.decl [
  "cid" :: uint64T;
  "nextSeq" :: uint64T
].

Definition Client__NewRequest: val :=
  rec: "Client__NewRequest" "c" "request" :=
    let: "seq" := struct.loadF Client "nextSeq" "c" in
    struct.storeF Client "nextSeq" "c" (std.SumAssumeNoOverflow (struct.loadF Client "nextSeq" "c") #1);;
    let: "data1" := NewSliceWithCap byteT #0 ((#8 + #8) + (slice.len "request")) in
    let: "data2" := marshal.WriteInt "data1" (struct.loadF Client "cid" "c") in
    let: "data3" := marshal.WriteInt "data2" "seq" in
    let: "data4" := marshal.WriteBytes "data3" "request" in
    "data4".

Definition MakeClient: val :=
  rec: "MakeClient" "cid" :=
    let: "c" := struct.alloc Client (zero_val (struct.t Client)) in
    struct.storeF Client "cid" "c" "cid";;
    struct.storeF Client "nextSeq" "c" #1;;
    "c".

End code.
