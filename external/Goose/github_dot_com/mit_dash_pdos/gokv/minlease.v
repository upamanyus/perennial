(* autogenerated from github.com/mit-pdos/gokv/minlease *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_dot_com.goose_dash_lang.std.
From Goose Require github_dot_com.mit_dash_pdos.gokv.grove__ffi.
From Goose Require github_dot_com.tchajed.goose.machine.
From Goose Require sync.

From Perennial.goose_lang Require Import ffi.grove_prelude.

Definition RPC_GET : expr := #0.

Definition RPC_PUT : expr := #1.

Definition Server := struct.decl [
  "mu" :: ptrT;
  "val" :: uint64T;
  "leaseExpiration" :: uint64T
].

(* return true iff successful *)
Definition Server__TryLocalIncrement: val :=
  rec: "Server__TryLocalIncrement" "s" :=
    let: "s" := ref_to ptrT "s" in
    sync.Mutex__Lock (struct.loadF Server "mu" (![ptrT] "s"));;
    let: "h" := ref_zero uint64T in
    let: <> := ref_zero uint64T in
    let: ("$a0", "$a1") := grove__ffi.GetTimeRange #() in
    "h" <-[uint64T] "$a1";;
    "$a0";;
    (if: (![uint64T] "h") ≥ (struct.loadF Server "leaseExpiration" (![ptrT] "s"))
    then
      sync.Mutex__Unlock (struct.loadF Server "mu" (![ptrT] "s"));;
      return: (#false)
    else #());;
    let: "$a0" := std.SumAssumeNoOverflow (struct.loadF Server "val" (![ptrT] "s")) #1 in
    struct.storeF Server "val" (![ptrT] "s") "$a0";;
    sync.Mutex__Unlock (struct.loadF Server "mu" (![ptrT] "s"));;
    return: (#true).

Definition Server__Put: val :=
  rec: "Server__Put" "s" "val" :=
    let: "val" := ref_to uint64T "val" in
    let: "s" := ref_to ptrT "s" in
    sync.Mutex__Lock (struct.loadF Server "mu" (![ptrT] "s"));;
    let: "$a0" := ![uint64T] "val" in
    struct.storeF Server "val" (![ptrT] "s") "$a0";;
    sync.Mutex__Unlock (struct.loadF Server "mu" (![ptrT] "s"));;
    #().

Definition Server__Get: val :=
  rec: "Server__Get" "s" :=
    let: "s" := ref_to ptrT "s" in
    sync.Mutex__Lock (struct.loadF Server "mu" (![ptrT] "s"));;
    let: "v" := ref_zero uint64T in
    let: "$a0" := struct.loadF Server "val" (![ptrT] "s") in
    "v" <-[uint64T] "$a0";;
    sync.Mutex__Unlock (struct.loadF Server "mu" (![ptrT] "s"));;
    return: (![uint64T] "v").

Definition StartServer: val :=
  rec: "StartServer" <> :=
    let: "s" := ref_zero ptrT in
    let: "$a0" := struct.alloc Server (zero_val (struct.t Server)) in
    "s" <-[ptrT] "$a0";;
    let: "$a0" := struct.alloc sync.Mutex (zero_val (struct.t sync.Mutex)) in
    struct.storeF Server "mu" (![ptrT] "s") "$a0";;
    let: "$a0" := #0 in
    struct.storeF Server "val" (![ptrT] "s") "$a0";;
    let: "$a0" := #10 in
    struct.storeF Server "leaseExpiration" (![ptrT] "s") "$a0";;
    Fork ((for: (λ: <>, Server__TryLocalIncrement (![ptrT] "s")); (λ: <>, Skip) := λ: <>,
            #()));;
    return: (![ptrT] "s").

Definition client: val :=
  rec: "client" "s" :=
    let: "s" := ref_to ptrT "s" in
    (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
      let: <> := ref_zero uint64T in
      let: "l" := ref_zero uint64T in
      let: ("$a0", "$a1") := grove__ffi.GetTimeRange #() in
      "$a1";;
      "l" <-[uint64T] "$a0";;
      (if: (![uint64T] "l") > (struct.loadF Server "leaseExpiration" (![ptrT] "s"))
      then Break
      else #());;
      machine.Sleep ((struct.loadF Server "leaseExpiration" (![ptrT] "s")) - (![uint64T] "l"));;
      #()).

Definition main: val :=
  rec: "main" <> :=
    let: "s" := ref_zero ptrT in
    let: "$a0" := StartServer #() in
    "s" <-[ptrT] "$a0";;
    client (![ptrT] "s");;
    #().
