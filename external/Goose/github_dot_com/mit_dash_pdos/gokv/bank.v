(* autogenerated from github.com/mit-pdos/gokv/bank *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_dot_com.mit_dash_pdos.gokv.kv.
From Goose Require github_dot_com.mit_dash_pdos.gokv.lockservice.
From Goose Require github_dot_com.tchajed.goose.machine.
From Goose Require github_dot_com.tchajed.marshal.

Section code.
Context `{ext_ty: ext_types}.
Local Coercion Var' s: expr := Var s.

Definition BAL_TOTAL : expr := #1000.

Definition BankClerk := struct.decl [
  "lck" :: ptrT;
  "kvck" :: ptrT;
  "accts" :: slice.T stringT
].

Definition acquire_two_good: val :=
  rec: "acquire_two_good" "lck" "l1" "l2" :=
    (if: "l1" < "l2"
    then
      lockservice.LockClerk__Lock "lck" "l1";;
      lockservice.LockClerk__Lock "lck" "l2"
    else
      lockservice.LockClerk__Lock "lck" "l2";;
      lockservice.LockClerk__Lock "lck" "l1");;
    #().

Definition acquire_two: val :=
  rec: "acquire_two" "lck" "l1" "l2" :=
    lockservice.LockClerk__Lock "lck" "l1";;
    lockservice.LockClerk__Lock "lck" "l2";;
    #().

Definition release_two: val :=
  rec: "release_two" "lck" "l1" "l2" :=
    lockservice.LockClerk__Unlock "lck" "l1";;
    lockservice.LockClerk__Unlock "lck" "l2";;
    #().

Definition encodeInt: val :=
  rec: "encodeInt" "a" :=
    StringFromBytes (marshal.WriteInt slice.nil "a").

Definition decodeInt: val :=
  rec: "decodeInt" "a" :=
    let: ("v", <>) := marshal.ReadInt (StringToBytes "a") in
    "v".

(* Requires that the account numbers are smaller than num_accounts
   If account balance in acc_from is at least amount, transfer amount to acc_to *)
Definition BankClerk__transfer_internal: val :=
  rec: "BankClerk__transfer_internal" "bck" "acc_from" "acc_to" "amount" :=
    acquire_two (struct.loadF BankClerk "lck" "bck") "acc_from" "acc_to";;
    let: "old_amount" := decodeInt ((struct.loadF kv.Kv "Get" (struct.loadF BankClerk "kvck" "bck")) "acc_from") in
    (if: "old_amount" ≥ "amount"
    then
      (struct.loadF kv.Kv "Put" (struct.loadF BankClerk "kvck" "bck")) "acc_from" (encodeInt ("old_amount" - "amount"));;
      (struct.loadF kv.Kv "Put" (struct.loadF BankClerk "kvck" "bck")) "acc_to" (encodeInt ((decodeInt ((struct.loadF kv.Kv "Get" (struct.loadF BankClerk "kvck" "bck")) "acc_to")) + "amount"))
    else #());;
    release_two (struct.loadF BankClerk "lck" "bck") "acc_from" "acc_to";;
    #().

Definition BankClerk__SimpleTransfer: val :=
  rec: "BankClerk__SimpleTransfer" "bck" :=
    Skip;;
    (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
      let: "src" := machine.RandomUint64 #() in
      let: "dst" := machine.RandomUint64 #() in
      let: "amount" := machine.RandomUint64 #() in
      (if: (("src" < (slice.len (struct.loadF BankClerk "accts" "bck"))) && ("dst" < (slice.len (struct.loadF BankClerk "accts" "bck")))) && ("src" ≠ "dst")
      then
        BankClerk__transfer_internal "bck" (SliceGet stringT (struct.loadF BankClerk "accts" "bck") "src") (SliceGet stringT (struct.loadF BankClerk "accts" "bck") "dst") "amount";;
        Continue
      else Continue));;
    #().

Definition BankClerk__get_total: val :=
  rec: "BankClerk__get_total" "bck" :=
    let: "sum" := ref (zero_val uint64T) in
    ForSlice stringT <> "acct" (struct.loadF BankClerk "accts" "bck")
      (lockservice.LockClerk__Lock (struct.loadF BankClerk "lck" "bck") "acct";;
      "sum" <-[uint64T] ((![uint64T] "sum") + (decodeInt ((struct.loadF kv.Kv "Get" (struct.loadF BankClerk "kvck" "bck")) "acct"))));;
    ForSlice stringT <> "acct" (struct.loadF BankClerk "accts" "bck")
      (lockservice.LockClerk__Unlock (struct.loadF BankClerk "lck" "bck") "acct");;
    ![uint64T] "sum".

Definition BankClerk__SimpleAudit: val :=
  rec: "BankClerk__SimpleAudit" "bck" :=
    Skip;;
    (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
      (if: (BankClerk__get_total "bck") ≠ BAL_TOTAL
      then
        Panic "Balance total invariant violated";;
        Continue
      else Continue));;
    #().

Definition MakeBankClerkSlice: val :=
  rec: "MakeBankClerkSlice" "lck" "kv" "init_flag" "accts" :=
    let: "bck" := struct.alloc BankClerk (zero_val (struct.t BankClerk)) in
    struct.storeF BankClerk "lck" "bck" "lck";;
    struct.storeF BankClerk "kvck" "bck" "kv";;
    struct.storeF BankClerk "accts" "bck" "accts";;
    lockservice.LockClerk__Lock (struct.loadF BankClerk "lck" "bck") "init_flag";;
    (if: ((struct.loadF kv.Kv "Get" (struct.loadF BankClerk "kvck" "bck")) "init_flag") = #(str"")
    then
      (struct.loadF kv.Kv "Put" (struct.loadF BankClerk "kvck" "bck")) (SliceGet stringT (struct.loadF BankClerk "accts" "bck") #0) (encodeInt BAL_TOTAL);;
      ForSlice stringT <> "acct" (SliceSkip stringT (struct.loadF BankClerk "accts" "bck") #1)
        ((struct.loadF kv.Kv "Put" (struct.loadF BankClerk "kvck" "bck")) "acct" (encodeInt #0));;
      (struct.loadF kv.Kv "Put" (struct.loadF BankClerk "kvck" "bck")) "init_flag" #(str"1")
    else #());;
    lockservice.LockClerk__Unlock (struct.loadF BankClerk "lck" "bck") "init_flag";;
    "bck".

Definition MakeBankClerk: val :=
  rec: "MakeBankClerk" "lck" "kv" "init_flag" "acc1" "acc2" :=
    let: "accts" := ref (zero_val (slice.T stringT)) in
    "accts" <-[slice.T stringT] (SliceAppend stringT (![slice.T stringT] "accts") "acc1");;
    "accts" <-[slice.T stringT] (SliceAppend stringT (![slice.T stringT] "accts") "acc2");;
    MakeBankClerkSlice "lck" "kv" "init_flag" (![slice.T stringT] "accts").

End code.
