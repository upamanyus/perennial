(* autogenerated from github.com/mit-pdos/gokv/reconnectclient *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_dot_com.mit_dash_pdos.gokv.grove__ffi.
From Goose Require github_dot_com.mit_dash_pdos.gokv.urpc.
From Goose Require github_dot_com.tchajed.goose.machine.
From Goose Require sync.

From Perennial.goose_lang Require Import ffi.grove_prelude.

Definition ReconnectingClient := struct.decl [
  "mu" :: ptrT;
  "valid" :: boolT;
  "urpcCl" :: ptrT;
  "addr" :: uint64T
].

Definition MakeReconnectingClient: val :=
  rec: "MakeReconnectingClient" "addr" :=
    let: "r" := struct.alloc ReconnectingClient (zero_val (struct.t ReconnectingClient)) in
    struct.storeF ReconnectingClient "mu" "r" (struct.alloc sync.Mutex (zero_val (struct.t sync.Mutex)));;
    struct.storeF ReconnectingClient "valid" "r" #false;;
    struct.storeF ReconnectingClient "addr" "r" "addr";;
    "r".

Definition ReconnectingClient__getClient: val :=
  rec: "ReconnectingClient__getClient" "cl" :=
    sync.Mutex__Lock (struct.loadF ReconnectingClient "mu" "cl");;
    (if: struct.loadF ReconnectingClient "valid" "cl"
    then
      let: "ret" := struct.loadF ReconnectingClient "urpcCl" "cl" in
      sync.Mutex__Unlock (struct.loadF ReconnectingClient "mu" "cl");;
      (#0, "ret")
    else
      sync.Mutex__Unlock (struct.loadF ReconnectingClient "mu" "cl");;
      let: "newRpcCl" := ref (zero_val ptrT) in
      let: "err" := ref (zero_val uint64T) in
      let: ("0_ret", "1_ret") := urpc.TryMakeClient (struct.loadF ReconnectingClient "addr" "cl") in
      "err" <-[uint64T] "0_ret";;
      "newRpcCl" <-[ptrT] "1_ret";;
      (if: (![uint64T] "err") ≠ #0
      then machine.Sleep #10000000
      else #());;
      sync.Mutex__Lock (struct.loadF ReconnectingClient "mu" "cl");;
      (if: (![uint64T] "err") = #0
      then
        struct.storeF ReconnectingClient "urpcCl" "cl" (![ptrT] "newRpcCl");;
        struct.storeF ReconnectingClient "valid" "cl" #true
      else #());;
      sync.Mutex__Unlock (struct.loadF ReconnectingClient "mu" "cl");;
      (![uint64T] "err", ![ptrT] "newRpcCl")).

Definition ReconnectingClient__Call: val :=
  rec: "ReconnectingClient__Call" "cl" "rpcid" "args" "reply" "timeout_ms" :=
    let: ("err1", "urpcCl") := ReconnectingClient__getClient "cl" in
    (if: "err1" ≠ #0
    then "err1"
    else
      let: "err" := urpc.Client__Call "urpcCl" "rpcid" "args" "reply" "timeout_ms" in
      (if: "err" = urpc.ErrDisconnect
      then
        sync.Mutex__Lock (struct.loadF ReconnectingClient "mu" "cl");;
        struct.storeF ReconnectingClient "valid" "cl" #false;;
        sync.Mutex__Unlock (struct.loadF ReconnectingClient "mu" "cl")
      else #());;
      "err").
