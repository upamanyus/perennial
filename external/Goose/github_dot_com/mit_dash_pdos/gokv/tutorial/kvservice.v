(* autogenerated from github.com/mit-pdos/gokv/tutorial/kvservice *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_dot_com.goose_dash_lang.std.
From Goose Require github_dot_com.mit_dash_pdos.gokv.grove__ffi.
From Goose Require github_dot_com.mit_dash_pdos.gokv.urpc.
From Goose Require github_dot_com.tchajed.marshal.
From Goose Require sync.

From Perennial.goose_lang Require Import ffi.grove_prelude.

(* client.go *)

Definition Clerk := struct.decl [
  "rpcCl" :: ptrT
].

Definition Locked := struct.decl [
  "rpcCl" :: ptrT;
  "id" :: uint64T
].

(* Client from kvservice_rpc.gb.go *)

Definition Client := struct.decl [
  "cl" :: ptrT
].

Definition makeClient: val :=
  rec: "makeClient" "hostname" :=
    return: (struct.new Client [
       "cl" ::= urpc.MakeClient (![uint64T] "hostname")
     ]).

Definition MakeClerk: val :=
  rec: "MakeClerk" "host" :=
    return: (struct.new Clerk [
       "rpcCl" ::= makeClient (![uint64T] "host")
     ]).

Definition rpcIdGetFreshNum : expr := #0.

Definition rpcIdPut : expr := #1.

Definition rpcIdConditionalPut : expr := #2.

Definition rpcIdGet : expr := #3.

(* putArgs from kvservice.gb.go *)

Definition putArgs := struct.decl [
  "opId" :: uint64T;
  "key" :: stringT;
  "val" :: stringT
].

Definition encodePutArgs: val :=
  rec: "encodePutArgs" "a" :=
    let: "e" := ref_to (slice.T byteT) (NewSlice byteT #0) in
    let: "$a0" := marshal.WriteInt (![slice.T byteT] "e") (struct.loadF putArgs "opId" (![ptrT] "a")) in
    "e" <-[slice.T byteT] "$a0";;
    let: "keyBytes" := ref_zero (slice.T byteT) in
    let: "$a0" := StringToBytes (struct.loadF putArgs "key" (![ptrT] "a")) in
    "keyBytes" <-[slice.T byteT] "$a0";;
    let: "$a0" := marshal.WriteInt (![slice.T byteT] "e") (slice.len (![slice.T byteT] "keyBytes")) in
    "e" <-[slice.T byteT] "$a0";;
    let: "$a0" := marshal.WriteBytes (![slice.T byteT] "e") (![slice.T byteT] "keyBytes") in
    "e" <-[slice.T byteT] "$a0";;
    let: "$a0" := marshal.WriteBytes (![slice.T byteT] "e") (StringToBytes (struct.loadF putArgs "val" (![ptrT] "a"))) in
    "e" <-[slice.T byteT] "$a0";;
    return: (![slice.T byteT] "e").

(* Client__putRpc from kvservice_rpc.gb.go *)

Definition Client__putRpc: val :=
  rec: "Client__putRpc" "cl" "args" :=
    let: "reply" := ref (zero_val (slice.T byteT)) in
    let: "err" := ref_zero uint64T in
    let: "$a0" := urpc.Client__Call (struct.loadF Client "cl" (![ptrT] "cl")) rpcIdPut (encodePutArgs (![ptrT] "args")) "reply" #100 in
    "err" <-[uint64T] "$a0";;
    (if: (![uint64T] "err") = urpc.ErrNone
    then return: (![uint64T] "err")
    else #());;
    return: (![uint64T] "err").

(* DecodeUint64 from kvservice.gb.go *)

Definition DecodeUint64: val :=
  rec: "DecodeUint64" "x" :=
    let: <> := ref_zero (slice.T byteT) in
    let: "a" := ref_zero uint64T in
    let: ("$a0", "$a1") := marshal.ReadInt (![slice.T byteT] "x") in
    "$a1";;
    "a" <-[uint64T] "$a0";;
    return: (![uint64T] "a").

(* Client__getFreshNumRpc from kvservice_rpc.gb.go *)

Definition Client__getFreshNumRpc: val :=
  rec: "Client__getFreshNumRpc" "cl" :=
    let: "reply" := ref (zero_val (slice.T byteT)) in
    let: "err" := ref_zero uint64T in
    let: "$a0" := urpc.Client__Call (struct.loadF Client "cl" (![ptrT] "cl")) rpcIdGetFreshNum (NewSlice byteT #0) "reply" #100 in
    "err" <-[uint64T] "$a0";;
    (if: (![uint64T] "err") = urpc.ErrNone
    then return: (DecodeUint64 (![slice.T byteT] "reply"), ![uint64T] "err")
    else #());;
    return: (#0, ![uint64T] "err").

Definition Clerk__Put: val :=
  rec: "Clerk__Put" "ck" "key" "val" :=
    let: "err" := ref (zero_val uint64T) in
    let: "opId" := ref (zero_val uint64T) in
    (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
      let: ("$a0", "$a1") := Client__getFreshNumRpc (struct.loadF Clerk "rpcCl" (![ptrT] "ck")) in
      "err" <-[uint64T] "$a1";;
      "opId" <-[uint64T] "$a0";;
      (if: (![uint64T] "err") = #0
      then Break
      else #());;
      #()).

(* conditionalPutArgs from kvservice.gb.go *)

Definition conditionalPutArgs := struct.decl [
  "opId" :: uint64T;
  "key" :: stringT;
  "expectedVal" :: stringT;
  "newVal" :: stringT
].

Definition encodeConditionalPutArgs: val :=
  rec: "encodeConditionalPutArgs" "a" :=
    let: "e" := ref_to (slice.T byteT) (NewSlice byteT #0) in
    let: "$a0" := marshal.WriteInt (![slice.T byteT] "e") (struct.loadF conditionalPutArgs "opId" (![ptrT] "a")) in
    "e" <-[slice.T byteT] "$a0";;
    let: "keyBytes" := ref_zero (slice.T byteT) in
    let: "$a0" := StringToBytes (struct.loadF conditionalPutArgs "key" (![ptrT] "a")) in
    "keyBytes" <-[slice.T byteT] "$a0";;
    let: "$a0" := marshal.WriteInt (![slice.T byteT] "e") (slice.len (![slice.T byteT] "keyBytes")) in
    "e" <-[slice.T byteT] "$a0";;
    let: "$a0" := marshal.WriteBytes (![slice.T byteT] "e") (![slice.T byteT] "keyBytes") in
    "e" <-[slice.T byteT] "$a0";;
    let: "expectedValBytes" := ref_zero (slice.T byteT) in
    let: "$a0" := StringToBytes (struct.loadF conditionalPutArgs "expectedVal" (![ptrT] "a")) in
    "expectedValBytes" <-[slice.T byteT] "$a0";;
    let: "$a0" := marshal.WriteInt (![slice.T byteT] "e") (slice.len (![slice.T byteT] "expectedValBytes")) in
    "e" <-[slice.T byteT] "$a0";;
    let: "$a0" := marshal.WriteBytes (![slice.T byteT] "e") (![slice.T byteT] "expectedValBytes") in
    "e" <-[slice.T byteT] "$a0";;
    let: "$a0" := marshal.WriteBytes (![slice.T byteT] "e") (StringToBytes (struct.loadF conditionalPutArgs "newVal" (![ptrT] "a"))) in
    "e" <-[slice.T byteT] "$a0";;
    return: (![slice.T byteT] "e").

(* Client__conditionalPutRpc from kvservice_rpc.gb.go *)

Definition Client__conditionalPutRpc: val :=
  rec: "Client__conditionalPutRpc" "cl" "args" :=
    let: "reply" := ref (zero_val (slice.T byteT)) in
    let: "err" := ref_zero uint64T in
    let: "$a0" := urpc.Client__Call (struct.loadF Client "cl" (![ptrT] "cl")) rpcIdConditionalPut (encodeConditionalPutArgs (![ptrT] "args")) "reply" #100 in
    "err" <-[uint64T] "$a0";;
    (if: (![uint64T] "err") = urpc.ErrNone
    then return: (StringFromBytes (![slice.T byteT] "reply"), ![uint64T] "err")
    else #());;
    return: (#(str""), ![uint64T] "err").

(* returns true if ConditionalPut was successful, false if current value did not
   match expected value. *)
Definition Clerk__ConditionalPut: val :=
  rec: "Clerk__ConditionalPut" "ck" "key" "expectedVal" "newVal" :=
    let: "err" := ref (zero_val uint64T) in
    let: "opId" := ref (zero_val uint64T) in
    (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
      let: ("$a0", "$a1") := Client__getFreshNumRpc (struct.loadF Clerk "rpcCl" (![ptrT] "ck")) in
      "err" <-[uint64T] "$a1";;
      "opId" <-[uint64T] "$a0";;
      (if: (![uint64T] "err") = #0
      then Break
      else #());;
      #()).

(* getArgs from kvservice.gb.go *)

Definition getArgs := struct.decl [
  "opId" :: uint64T;
  "key" :: stringT
].

Definition encodeGetArgs: val :=
  rec: "encodeGetArgs" "a" :=
    let: "e" := ref_to (slice.T byteT) (NewSlice byteT #0) in
    let: "$a0" := marshal.WriteInt (![slice.T byteT] "e") (struct.loadF getArgs "opId" (![ptrT] "a")) in
    "e" <-[slice.T byteT] "$a0";;
    let: "$a0" := marshal.WriteBytes (![slice.T byteT] "e") (StringToBytes (struct.loadF getArgs "key" (![ptrT] "a"))) in
    "e" <-[slice.T byteT] "$a0";;
    return: (![slice.T byteT] "e").

(* Client__getRpc from kvservice_rpc.gb.go *)

Definition Client__getRpc: val :=
  rec: "Client__getRpc" "cl" "args" :=
    let: "reply" := ref (zero_val (slice.T byteT)) in
    let: "err" := ref_zero uint64T in
    let: "$a0" := urpc.Client__Call (struct.loadF Client "cl" (![ptrT] "cl")) rpcIdGet (encodeGetArgs (![ptrT] "args")) "reply" #100 in
    "err" <-[uint64T] "$a0";;
    (if: (![uint64T] "err") = urpc.ErrNone
    then return: (StringFromBytes (![slice.T byteT] "reply"), ![uint64T] "err")
    else #());;
    return: (#(str""), ![uint64T] "err").

(* returns true if ConditionalPut was successful, false if current value did not
   match expected value. *)
Definition Clerk__Get: val :=
  rec: "Clerk__Get" "ck" "key" :=
    let: "err" := ref (zero_val uint64T) in
    let: "opId" := ref (zero_val uint64T) in
    (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
      let: ("$a0", "$a1") := Client__getFreshNumRpc (struct.loadF Clerk "rpcCl" (![ptrT] "ck")) in
      "err" <-[uint64T] "$a1";;
      "opId" <-[uint64T] "$a0";;
      (if: (![uint64T] "err") = #0
      then Break
      else #());;
      #()).

(* kvservice.gb.go *)

(* TODO: these are generic *)
Definition EncodeBool: val :=
  rec: "EncodeBool" "a" :=
    (if: ![boolT] "a"
    then return: (SliceAppend byteT (NewSlice byteT #0) #(U8 1))
    else return: (SliceAppend byteT (NewSlice byteT #0) #(U8 0)));;
    #().

Definition DecodeBool: val :=
  rec: "DecodeBool" "x" :=
    return: ((SliceGet byteT (![slice.T byteT] "x") #0) = #(U8 1)).

Definition EncodeUint64: val :=
  rec: "EncodeUint64" "a" :=
    return: (marshal.WriteInt (NewSlice byteT #0) (![uint64T] "a")).

Definition decodePutArgs: val :=
  rec: "decodePutArgs" "x" :=
    let: "e" := ref_to (slice.T byteT) (![slice.T byteT] "x") in
    let: "a" := ref_zero ptrT in
    let: "$a0" := struct.alloc putArgs (zero_val (struct.t putArgs)) in
    "a" <-[ptrT] "$a0";;
    let: ("$a0", "$a1") := marshal.ReadInt (![slice.T byteT] "e") in
    "e" <-[slice.T byteT] "$a1";;
    struct.storeF putArgs "opId" (![ptrT] "a") "$a0";;
    let: "e2" := ref_zero (slice.T byteT) in
    let: "keyLen" := ref_zero uint64T in
    let: ("$a0", "$a1") := marshal.ReadInt (![slice.T byteT] "e") in
    "e2" <-[slice.T byteT] "$a1";;
    "keyLen" <-[uint64T] "$a0";;
    let: "valBytes" := ref_zero (slice.T byteT) in
    let: "keyBytes" := ref_zero (slice.T byteT) in
    let: ("$a0", "$a1") := marshal.ReadBytes (![slice.T byteT] "e2") (![uint64T] "keyLen") in
    "valBytes" <-[slice.T byteT] "$a1";;
    "keyBytes" <-[slice.T byteT] "$a0";;
    let: "$a0" := StringFromBytes (![slice.T byteT] "keyBytes") in
    struct.storeF putArgs "key" (![ptrT] "a") "$a0";;
    let: "$a0" := StringFromBytes (![slice.T byteT] "valBytes") in
    struct.storeF putArgs "val" (![ptrT] "a") "$a0";;
    return: (![ptrT] "a").

Definition decodeConditionalPutArgs: val :=
  rec: "decodeConditionalPutArgs" "x" :=
    let: "e" := ref_to (slice.T byteT) (![slice.T byteT] "x") in
    let: "a" := ref_zero ptrT in
    let: "$a0" := struct.alloc conditionalPutArgs (zero_val (struct.t conditionalPutArgs)) in
    "a" <-[ptrT] "$a0";;
    let: ("$a0", "$a1") := marshal.ReadInt (![slice.T byteT] "e") in
    "e" <-[slice.T byteT] "$a1";;
    struct.storeF conditionalPutArgs "opId" (![ptrT] "a") "$a0";;
    let: "e2" := ref_zero (slice.T byteT) in
    let: "keyLen" := ref_zero uint64T in
    let: ("$a0", "$a1") := marshal.ReadInt (![slice.T byteT] "e") in
    "e2" <-[slice.T byteT] "$a1";;
    "keyLen" <-[uint64T] "$a0";;
    let: "e3" := ref_zero (slice.T byteT) in
    let: "keyBytes" := ref_zero (slice.T byteT) in
    let: ("$a0", "$a1") := marshal.ReadBytes (![slice.T byteT] "e2") (![uint64T] "keyLen") in
    "e3" <-[slice.T byteT] "$a1";;
    "keyBytes" <-[slice.T byteT] "$a0";;
    let: "$a0" := StringFromBytes (![slice.T byteT] "keyBytes") in
    struct.storeF conditionalPutArgs "key" (![ptrT] "a") "$a0";;
    let: "e4" := ref_zero (slice.T byteT) in
    let: "expectedValLen" := ref_zero uint64T in
    let: ("$a0", "$a1") := marshal.ReadInt (![slice.T byteT] "e3") in
    "e4" <-[slice.T byteT] "$a1";;
    "expectedValLen" <-[uint64T] "$a0";;
    let: "newValBytes" := ref_zero (slice.T byteT) in
    let: "expectedValBytes" := ref_zero (slice.T byteT) in
    let: ("$a0", "$a1") := marshal.ReadBytes (![slice.T byteT] "e4") (![uint64T] "expectedValLen") in
    "newValBytes" <-[slice.T byteT] "$a1";;
    "expectedValBytes" <-[slice.T byteT] "$a0";;
    let: "$a0" := StringFromBytes (![slice.T byteT] "expectedValBytes") in
    struct.storeF conditionalPutArgs "expectedVal" (![ptrT] "a") "$a0";;
    let: "$a0" := StringFromBytes (![slice.T byteT] "newValBytes") in
    struct.storeF conditionalPutArgs "newVal" (![ptrT] "a") "$a0";;
    return: (![ptrT] "a").

Definition decodeGetArgs: val :=
  rec: "decodeGetArgs" "x" :=
    let: "e" := ref_to (slice.T byteT) (![slice.T byteT] "x") in
    let: "keyBytes" := ref (zero_val (slice.T byteT)) in
    let: "a" := ref_zero ptrT in
    let: "$a0" := struct.alloc getArgs (zero_val (struct.t getArgs)) in
    "a" <-[ptrT] "$a0";;
    let: ("$a0", "$a1") := marshal.ReadInt (![slice.T byteT] "e") in
    "keyBytes" <-[slice.T byteT] "$a1";;
    struct.storeF getArgs "opId" (![ptrT] "a") "$a0";;
    let: "$a0" := StringFromBytes (![slice.T byteT] "keyBytes") in
    struct.storeF getArgs "key" (![ptrT] "a") "$a0";;
    return: (![ptrT] "a").

(* kvservice_rpc.gb.go *)

Definition Error: ty := uint64T.

(* kvservice_rpc_server.gb.go *)

(* Server from server.go *)

Definition Server := struct.decl [
  "mu" :: ptrT;
  "nextFreshId" :: uint64T;
  "lastReplies" :: mapT stringT;
  "kvs" :: mapT stringT
].

Definition Server__get: val :=
  rec: "Server__get" "s" "args" :=
    sync.Mutex__Lock (struct.loadF Server "mu" (![ptrT] "s"));;
    let: "ok" := ref_zero boolT in
    let: "ret" := ref_zero stringT in
    let: ("$a0", "$a1") := Fst (MapGet (struct.loadF Server "lastReplies" (![ptrT] "s")) (struct.loadF getArgs "opId" (![ptrT] "args"))) in
    "ok" <-[boolT] "$a1";;
    "ret" <-[stringT] "$a0";;
    (if: ![boolT] "ok"
    then
      sync.Mutex__Unlock (struct.loadF Server "mu" (![ptrT] "s"));;
      return: (![stringT] "ret")
    else #());;
    let: "ret2" := ref_zero stringT in
    let: "$a0" := Fst (MapGet (struct.loadF Server "kvs" (![ptrT] "s")) (struct.loadF getArgs "key" (![ptrT] "args"))) in
    "ret2" <-[stringT] "$a0";;
    let: "$a0" := ![stringT] "ret2" in
    MapInsert (struct.loadF Server "lastReplies" (![ptrT] "s")) (struct.loadF getArgs "opId" (![ptrT] "args")) "$a0";;
    sync.Mutex__Unlock (struct.loadF Server "mu" (![ptrT] "s"));;
    return: (![stringT] "ret2").

Definition Server__conditionalPut: val :=
  rec: "Server__conditionalPut" "s" "args" :=
    sync.Mutex__Lock (struct.loadF Server "mu" (![ptrT] "s"));;
    let: "ok" := ref_zero boolT in
    let: "ret" := ref_zero stringT in
    let: ("$a0", "$a1") := Fst (MapGet (struct.loadF Server "lastReplies" (![ptrT] "s")) (struct.loadF conditionalPutArgs "opId" (![ptrT] "args"))) in
    "ok" <-[boolT] "$a1";;
    "ret" <-[stringT] "$a0";;
    (if: ![boolT] "ok"
    then
      sync.Mutex__Unlock (struct.loadF Server "mu" (![ptrT] "s"));;
      return: (![stringT] "ret")
    else #());;
    let: "ret2" := ref_to stringT #(str"") in
    (if: (Fst (MapGet (struct.loadF Server "kvs" (![ptrT] "s")) (struct.loadF conditionalPutArgs "key" (![ptrT] "args")))) = (struct.loadF conditionalPutArgs "expectedVal" (![ptrT] "args"))
    then
      let: "$a0" := struct.loadF conditionalPutArgs "newVal" (![ptrT] "args") in
      MapInsert (struct.loadF Server "kvs" (![ptrT] "s")) (struct.loadF conditionalPutArgs "key" (![ptrT] "args")) "$a0";;
      let: "$a0" := #(str"ok") in
      "ret2" <-[stringT] "$a0";;
      #()
    else #());;
    let: "$a0" := ![stringT] "ret2" in
    MapInsert (struct.loadF Server "lastReplies" (![ptrT] "s")) (struct.loadF conditionalPutArgs "opId" (![ptrT] "args")) "$a0";;
    sync.Mutex__Unlock (struct.loadF Server "mu" (![ptrT] "s"));;
    return: (![stringT] "ret2").

Definition Server__put: val :=
  rec: "Server__put" "s" "args" :=
    sync.Mutex__Lock (struct.loadF Server "mu" (![ptrT] "s"));;
    let: "ok" := ref_zero boolT in
    let: <> := ref_zero stringT in
    let: ("$a0", "$a1") := Fst (MapGet (struct.loadF Server "lastReplies" (![ptrT] "s")) (struct.loadF putArgs "opId" (![ptrT] "args"))) in
    "ok" <-[boolT] "$a1";;
    "$a0";;
    (if: ![boolT] "ok"
    then
      sync.Mutex__Unlock (struct.loadF Server "mu" (![ptrT] "s"));;
      return: (#())
    else #());;
    let: "$a0" := struct.loadF putArgs "val" (![ptrT] "args") in
    MapInsert (struct.loadF Server "kvs" (![ptrT] "s")) (struct.loadF putArgs "key" (![ptrT] "args")) "$a0";;
    let: "$a0" := #(str"") in
    MapInsert (struct.loadF Server "lastReplies" (![ptrT] "s")) (struct.loadF putArgs "opId" (![ptrT] "args")) "$a0";;
    sync.Mutex__Unlock (struct.loadF Server "mu" (![ptrT] "s"));;
    #().

Definition Server__getFreshNum: val :=
  rec: "Server__getFreshNum" "s" :=
    sync.Mutex__Lock (struct.loadF Server "mu" (![ptrT] "s"));;
    let: "n" := ref_zero uint64T in
    let: "$a0" := struct.loadF Server "nextFreshId" (![ptrT] "s") in
    "n" <-[uint64T] "$a0";;
    let: "$a0" := std.SumAssumeNoOverflow (struct.loadF Server "nextFreshId" (![ptrT] "s")) #1 in
    struct.storeF Server "nextFreshId" (![ptrT] "s") "$a0";;
    sync.Mutex__Unlock (struct.loadF Server "mu" (![ptrT] "s"));;
    return: (![uint64T] "n").

Definition Server__Start: val :=
  rec: "Server__Start" "s" "me" :=
    let: "handlers" := ref_zero (mapT (arrowT unitT unitT)) in
    let: "$a0" := NewMap uint64T ((slice.T byteT) -> ptrT -> unitT)%!h(MISSING)t #() in
    "handlers" <-[mapT (arrowT unitT unitT)] "$a0";;
    let: "$a0" := (λ: "enc_args" "enc_reply",
      let: "$a0" := EncodeUint64 (Server__getFreshNum (![ptrT] "s")) in
      (![ptrT] "enc_reply") <-[slice.T byteT] "$a0";;
      #()
      ) in
    MapInsert (![mapT (arrowT unitT unitT)] "handlers") rpcIdGetFreshNum "$a0";;
    let: "$a0" := (λ: "enc_args" "enc_reply",
      Server__put (![ptrT] "s") (decodePutArgs (![slice.T byteT] "enc_args"));;
      #()
      ) in
    MapInsert (![mapT (arrowT unitT unitT)] "handlers") rpcIdPut "$a0";;
    let: "$a0" := (λ: "enc_args" "enc_reply",
      let: "$a0" := StringToBytes (Server__conditionalPut (![ptrT] "s") (decodeConditionalPutArgs (![slice.T byteT] "enc_args"))) in
      (![ptrT] "enc_reply") <-[slice.T byteT] "$a0";;
      #()
      ) in
    MapInsert (![mapT (arrowT unitT unitT)] "handlers") rpcIdConditionalPut "$a0";;
    let: "$a0" := (λ: "enc_args" "enc_reply",
      let: "$a0" := StringToBytes (Server__get (![ptrT] "s") (decodeGetArgs (![slice.T byteT] "enc_args"))) in
      (![ptrT] "enc_reply") <-[slice.T byteT] "$a0";;
      #()
      ) in
    MapInsert (![mapT (arrowT unitT unitT)] "handlers") rpcIdGet "$a0";;
    urpc.Server__Serve (urpc.MakeServer (![mapT (arrowT unitT unitT)] "handlers")) (![uint64T] "me");;
    #().

(* server.go *)

Definition MakeServer: val :=
  rec: "MakeServer" <> :=
    let: "s" := ref_zero ptrT in
    let: "$a0" := struct.alloc Server (zero_val (struct.t Server)) in
    "s" <-[ptrT] "$a0";;
    let: "$a0" := struct.alloc sync.Mutex (zero_val (struct.t sync.Mutex)) in
    struct.storeF Server "mu" (![ptrT] "s") "$a0";;
    let: "$a0" := NewMap stringT stringT #() in
    struct.storeF Server "kvs" (![ptrT] "s") "$a0";;
    let: "$a0" := NewMap uint64T stringT #() in
    struct.storeF Server "lastReplies" (![ptrT] "s") "$a0";;
    return: (![ptrT] "s").
