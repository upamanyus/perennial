(* autogenerated from github.com/mit-pdos/gokv/vrsm/apps/closed *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_dot_com.mit_dash_pdos.gokv.bank.
From Goose Require github_dot_com.mit_dash_pdos.gokv.grove__ffi.
From Goose Require github_dot_com.mit_dash_pdos.gokv.lockservice.
From Goose Require github_dot_com.mit_dash_pdos.gokv.vrsm.apps.vkv.
From Goose Require github_dot_com.mit_dash_pdos.gokv.vrsm.configservice.

From Perennial.goose_lang Require Import ffi.grove_prelude.

Definition dconfigHost : expr := #11.

Definition dconfigHostPaxos : expr := #12.

Definition dr1 : expr := #1.

Definition dr2 : expr := #2.

Definition lconfigHost : expr := #111.

Definition lconfigHostPaxos : expr := #112.

Definition lr1 : expr := #101.

Definition lr2 : expr := #102.

Definition mk_lconfig_hosts: val :=
  rec: "mk_lconfig_hosts" <> :=
    let: "configHosts" := ref_to (slice.T uint64T) (NewSlice uint64T #0) in
    return: (SliceAppend uint64T (![slice.T uint64T] "configHosts") lconfigHost).

Definition mk_dconfig_hosts: val :=
  rec: "mk_dconfig_hosts" <> :=
    let: "configHosts" := ref_to (slice.T uint64T) (NewSlice uint64T #0) in
    return: (SliceAppend uint64T (![slice.T uint64T] "configHosts") dconfigHost).

Definition mk_lconfig_paxosHosts: val :=
  rec: "mk_lconfig_paxosHosts" <> :=
    let: "configHosts" := ref_to (slice.T uint64T) (NewSlice uint64T #0) in
    return: (SliceAppend uint64T (![slice.T uint64T] "configHosts") lconfigHostPaxos).

Definition mk_dconfig_paxosHosts: val :=
  rec: "mk_dconfig_paxosHosts" <> :=
    let: "configHosts" := ref_to (slice.T uint64T) (NewSlice uint64T #0) in
    return: (SliceAppend uint64T (![slice.T uint64T] "configHosts") dconfigHostPaxos).

Definition lconfig_main: val :=
  rec: "lconfig_main" "fname" :=
    let: "fname" := ref_to stringT "fname" in
    let: "servers" := ref_to (slice.T uint64T) (NewSlice uint64T #0) in
    let: "$a0" := SliceAppend uint64T (![slice.T uint64T] "servers") lr1 in
    "servers" <-[slice.T uint64T] "$a0";;
    let: "$a0" := SliceAppend uint64T (![slice.T uint64T] "servers") lr2 in
    "servers" <-[slice.T uint64T] "$a0";;
    configservice.StartServer (![stringT] "fname") lconfigHost lconfigHostPaxos (mk_lconfig_paxosHosts #()) (![slice.T uint64T] "servers");;
    #().

Definition dconfig_main: val :=
  rec: "dconfig_main" "fname" :=
    let: "fname" := ref_to stringT "fname" in
    let: "servers" := ref_to (slice.T uint64T) (NewSlice uint64T #0) in
    let: "$a0" := SliceAppend uint64T (![slice.T uint64T] "servers") dr1 in
    "servers" <-[slice.T uint64T] "$a0";;
    let: "$a0" := SliceAppend uint64T (![slice.T uint64T] "servers") dr2 in
    "servers" <-[slice.T uint64T] "$a0";;
    configservice.StartServer (![stringT] "fname") dconfigHost dconfigHostPaxos (mk_dconfig_paxosHosts #()) (![slice.T uint64T] "servers");;
    #().

Definition kv_replica_main: val :=
  rec: "kv_replica_main" "fname" "me" "configHost" :=
    let: "configHost" := ref_to uint64T "configHost" in
    let: "me" := ref_to uint64T "me" in
    let: "fname" := ref_to stringT "fname" in
    let: "x" := ref_zero ptrT in
    let: "$a0" := ref (zero_val uint64T) in
    "x" <-[ptrT] "$a0";;
    let: "$a0" := #1 in
    (![ptrT] "x") <-[uint64T] "$a0";;
    let: "configHosts" := ref_to (slice.T uint64T) (NewSlice uint64T #0) in
    let: "$a0" := SliceAppend uint64T (![slice.T uint64T] "configHosts") (![uint64T] "configHost") in
    "configHosts" <-[slice.T uint64T] "$a0";;
    vkv.Start (![stringT] "fname") (![uint64T] "me") (![slice.T uint64T] "configHosts");;
    #().

Definition makeBankClerk: val :=
  rec: "makeBankClerk" <> :=
    let: "kvck" := ref_zero ptrT in
    let: "$a0" := vkv.MakeKv (mk_dconfig_hosts #()) in
    "kvck" <-[ptrT] "$a0";;
    let: "lck" := ref_zero ptrT in
    let: "$a0" := lockservice.MakeLockClerk (vkv.MakeKv (mk_lconfig_hosts #())) in
    "lck" <-[ptrT] "$a0";;
    return: (bank.MakeBankClerk (![ptrT] "lck") (![ptrT] "kvck") #(str"init") #(str"a1") #(str"a2")).

Definition bank_transferer_main: val :=
  rec: "bank_transferer_main" <> :=
    let: "bck" := ref_zero ptrT in
    let: "$a0" := makeBankClerk #() in
    "bck" <-[ptrT] "$a0";;
    (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
      bank.BankClerk__SimpleTransfer (![ptrT] "bck");;
      #()).

Definition bank_auditor_main: val :=
  rec: "bank_auditor_main" <> :=
    let: "bck" := ref_zero ptrT in
    let: "$a0" := makeBankClerk #() in
    "bck" <-[ptrT] "$a0";;
    (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
      bank.BankClerk__SimpleAudit (![ptrT] "bck");;
      #()).
