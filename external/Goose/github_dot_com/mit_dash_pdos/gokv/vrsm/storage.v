(* autogenerated from github.com/mit-pdos/gokv/vrsm/storage *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_dot_com.goose_dash_lang.std.
From Goose Require github_dot_com.mit_dash_pdos.gokv.aof.
From Goose Require github_dot_com.mit_dash_pdos.gokv.grove__ffi.
From Goose Require github_dot_com.mit_dash_pdos.gokv.vrsm.replica.
From Goose Require github_dot_com.tchajed.marshal.

From Perennial.goose_lang Require Import ffi.grove_prelude.

Definition InMemoryStateMachine := struct.decl [
  "ApplyReadonly" :: ((slice.T byteT) -> (uint64T * (slice.T byteT)))%ht;
  "ApplyVolatile" :: ((slice.T byteT) -> (slice.T byteT))%ht;
  "GetState" :: (unitT -> (slice.T byteT))%ht;
  "SetState" :: ((slice.T byteT) -> uint64T -> unitT)%ht
].

Definition MAX_LOG_SIZE : expr := ((#64 * #1024) * #1024) * #1024.

Definition StateMachine := struct.decl [
  "fname" :: stringT;
  "logFile" :: ptrT;
  "logsize" :: uint64T;
  "sealed" :: boolT;
  "epoch" :: uint64T;
  "nextIndex" :: uint64T;
  "smMem" :: ptrT
].

(* FIXME: better name; this isn't the same as "MakeDurable" *)
Definition StateMachine__makeDurableWithSnap: val :=
  rec: "StateMachine__makeDurableWithSnap" "s" "snap" :=
    let: "enc" := ref_to (slice.T byteT) (NewSliceWithCap byteT #0 (((#8 + (slice.len (![slice.T byteT] "snap"))) + #8) + #8)) in
    let: "$a0" := marshal.WriteInt (![slice.T byteT] "enc") (slice.len (![slice.T byteT] "snap")) in
    "enc" <-[slice.T byteT] "$a0";;
    let: "$a0" := marshal.WriteBytes (![slice.T byteT] "enc") (![slice.T byteT] "snap") in
    "enc" <-[slice.T byteT] "$a0";;
    let: "$a0" := marshal.WriteInt (![slice.T byteT] "enc") (struct.loadF StateMachine "epoch" (![ptrT] "s")) in
    "enc" <-[slice.T byteT] "$a0";;
    let: "$a0" := marshal.WriteInt (![slice.T byteT] "enc") (struct.loadF StateMachine "nextIndex" (![ptrT] "s")) in
    "enc" <-[slice.T byteT] "$a0";;
    (if: struct.loadF StateMachine "sealed" (![ptrT] "s")
    then
      marshal.WriteBytes (![slice.T byteT] "enc") (NewSlice byteT #1);;
      #()
    else #());;
    aof.AppendOnlyFile__Close (struct.loadF StateMachine "logFile" (![ptrT] "s"));;
    grove__ffi.FileWrite (struct.loadF StateMachine "fname" (![ptrT] "s")) (![slice.T byteT] "enc");;
    let: "$a0" := aof.CreateAppendOnlyFile (struct.loadF StateMachine "fname" (![ptrT] "s")) in
    struct.storeF StateMachine "logFile" (![ptrT] "s") "$a0";;
    #().

(* XXX: this is not safe to run concurrently with apply()
   requires that the state machine is not sealed *)
Definition StateMachine__truncateAndMakeDurable: val :=
  rec: "StateMachine__truncateAndMakeDurable" "s" :=
    let: "snap" := ref_zero (slice.T byteT) in
    let: "$a0" := (struct.loadF InMemoryStateMachine "GetState" (struct.loadF StateMachine "smMem" (![ptrT] "s"))) #() in
    "snap" <-[slice.T byteT] "$a0";;
    StateMachine__makeDurableWithSnap (![ptrT] "s") (![slice.T byteT] "snap");;
    #().

Definition StateMachine__apply: val :=
  rec: "StateMachine__apply" "s" "op" :=
    let: "ret" := ref_zero (slice.T byteT) in
    let: "$a0" := (struct.loadF InMemoryStateMachine "ApplyVolatile" (struct.loadF StateMachine "smMem" (![ptrT] "s"))) (![slice.T byteT] "op") in
    "ret" <-[slice.T byteT] "$a0";;
    let: "$a0" := std.SumAssumeNoOverflow (struct.loadF StateMachine "nextIndex" (![ptrT] "s")) #1 in
    struct.storeF StateMachine "nextIndex" (![ptrT] "s") "$a0";;
    struct.storeF StateMachine "logsize" (![ptrT] "s") ((struct.loadF StateMachine "logsize" (![ptrT] "s")) + (slice.len (![slice.T byteT] "op")));;
    let: "opWithLen" := ref_to (slice.T byteT) (NewSliceWithCap byteT #0 (#8 + (slice.len (![slice.T byteT] "op")))) in
    let: "$a0" := marshal.WriteInt (![slice.T byteT] "opWithLen") (slice.len (![slice.T byteT] "op")) in
    "opWithLen" <-[slice.T byteT] "$a0";;
    let: "$a0" := marshal.WriteBytes (![slice.T byteT] "opWithLen") (![slice.T byteT] "op") in
    "opWithLen" <-[slice.T byteT] "$a0";;
    let: "l" := ref_zero uint64T in
    let: "$a0" := aof.AppendOnlyFile__Append (struct.loadF StateMachine "logFile" (![ptrT] "s")) (![slice.T byteT] "opWithLen") in
    "l" <-[uint64T] "$a0";;
    let: "f" := ref_zero ptrT in
    let: "$a0" := struct.loadF StateMachine "logFile" (![ptrT] "s") in
    "f" <-[ptrT] "$a0";;
    let: "waitFn" := ref_zero (arrowT unitT unitT) in
    let: "$a0" := (位: <>,
      aof.AppendOnlyFile__WaitAppend (![ptrT] "f") (![uint64T] "l");;
      #()
      ) in
    "waitFn" <-[(arrowT unitT unitT)] "$a0";;
    return: (![slice.T byteT] "ret", ![(arrowT unitT unitT)] "waitFn").

Definition StateMachine__applyReadonly: val :=
  rec: "StateMachine__applyReadonly" "s" "op" :=
    return: ((struct.loadF InMemoryStateMachine "ApplyReadonly" (struct.loadF StateMachine "smMem" (![ptrT] "s"))) (![slice.T byteT] "op")).

(* TODO: make the nextIndex and epoch argument order consistent with replica.StateMachine *)
Definition StateMachine__setStateAndUnseal: val :=
  rec: "StateMachine__setStateAndUnseal" "s" "snap" "nextIndex" "epoch" :=
    let: "$a0" := ![uint64T] "epoch" in
    struct.storeF StateMachine "epoch" (![ptrT] "s") "$a0";;
    let: "$a0" := ![uint64T] "nextIndex" in
    struct.storeF StateMachine "nextIndex" (![ptrT] "s") "$a0";;
    let: "$a0" := #false in
    struct.storeF StateMachine "sealed" (![ptrT] "s") "$a0";;
    (struct.loadF InMemoryStateMachine "SetState" (struct.loadF StateMachine "smMem" (![ptrT] "s"))) (![slice.T byteT] "snap") (![uint64T] "nextIndex");;
    StateMachine__makeDurableWithSnap (![ptrT] "s") (![slice.T byteT] "snap");;
    #().

Definition StateMachine__getStateAndSeal: val :=
  rec: "StateMachine__getStateAndSeal" "s" :=
    (if: (~ (struct.loadF StateMachine "sealed" (![ptrT] "s")))
    then
      let: "$a0" := #true in
      struct.storeF StateMachine "sealed" (![ptrT] "s") "$a0";;
      let: "l" := ref_zero uint64T in
      let: "$a0" := aof.AppendOnlyFile__Append (struct.loadF StateMachine "logFile" (![ptrT] "s")) (NewSlice byteT #1) in
      "l" <-[uint64T] "$a0";;
      aof.AppendOnlyFile__WaitAppend (struct.loadF StateMachine "logFile" (![ptrT] "s")) (![uint64T] "l");;
      #()
    else #());;
    let: "snap" := ref_zero (slice.T byteT) in
    let: "$a0" := (struct.loadF InMemoryStateMachine "GetState" (struct.loadF StateMachine "smMem" (![ptrT] "s"))) #() in
    "snap" <-[slice.T byteT] "$a0";;
    return: (![slice.T byteT] "snap").

Definition recoverStateMachine: val :=
  rec: "recoverStateMachine" "smMem" "fname" :=
    let: "s" := ref_zero ptrT in
    let: "$a0" := struct.new StateMachine [
      "fname" ::= ![stringT] "fname";
      "smMem" ::= ![ptrT] "smMem"
    ] in
    "s" <-[ptrT] "$a0";;
    let: "enc" := ref_to (slice.T byteT) (grove__ffi.FileRead (struct.loadF StateMachine "fname" (![ptrT] "s"))) in
    (if: (slice.len (![slice.T byteT] "enc")) = #0
    then
      let: "initState" := ref_zero (slice.T byteT) in
      let: "$a0" := (struct.loadF InMemoryStateMachine "GetState" (![ptrT] "smMem")) #() in
      "initState" <-[slice.T byteT] "$a0";;
      let: "initialContents" := ref_to (slice.T byteT) (NewSliceWithCap byteT #0 (((#8 + (slice.len (![slice.T byteT] "initState"))) + #8) + #8)) in
      let: "$a0" := marshal.WriteInt (![slice.T byteT] "initialContents") (slice.len (![slice.T byteT] "initState")) in
      "initialContents" <-[slice.T byteT] "$a0";;
      let: "$a0" := marshal.WriteBytes (![slice.T byteT] "initialContents") (![slice.T byteT] "initState") in
      "initialContents" <-[slice.T byteT] "$a0";;
      let: "$a0" := marshal.WriteInt (![slice.T byteT] "initialContents") #0 in
      "initialContents" <-[slice.T byteT] "$a0";;
      let: "$a0" := marshal.WriteInt (![slice.T byteT] "initialContents") #0 in
      "initialContents" <-[slice.T byteT] "$a0";;
      grove__ffi.FileWrite (struct.loadF StateMachine "fname" (![ptrT] "s")) (![slice.T byteT] "initialContents");;
      let: "$a0" := aof.CreateAppendOnlyFile (![stringT] "fname") in
      struct.storeF StateMachine "logFile" (![ptrT] "s") "$a0";;
      return: (![ptrT] "s")
    else #());;
    let: "$a0" := aof.CreateAppendOnlyFile (![stringT] "fname") in
    struct.storeF StateMachine "logFile" (![ptrT] "s") "$a0";;
    let: "snapLen" := ref (zero_val uint64T) in
    let: "snap" := ref (zero_val (slice.T byteT)) in
    let: ("$a0", "$a1") := marshal.ReadInt (![slice.T byteT] "enc") in
    "enc" <-[slice.T byteT] "$a1";;
    "snapLen" <-[uint64T] "$a0";;
    let: "$a0" := SliceSubslice byteT (![slice.T byteT] "enc") #0 (![uint64T] "snapLen") in
    "snap" <-[slice.T byteT] "$a0";;
    let: "n" := ref_zero intT in
    let: "$a0" := slice.len (![slice.T byteT] "enc") in
    "n" <-[intT] "$a0";;
    let: "$a0" := SliceSubslice byteT (![slice.T byteT] "enc") (![uint64T] "snapLen") (![intT] "n") in
    "enc" <-[slice.T byteT] "$a0";;
    let: ("$a0", "$a1") := marshal.ReadInt (![slice.T byteT] "enc") in
    "enc" <-[slice.T byteT] "$a1";;
    struct.storeF StateMachine "epoch" (![ptrT] "s") "$a0";;
    let: ("$a0", "$a1") := marshal.ReadInt (![slice.T byteT] "enc") in
    "enc" <-[slice.T byteT] "$a1";;
    struct.storeF StateMachine "nextIndex" (![ptrT] "s") "$a0";;
    (struct.loadF InMemoryStateMachine "SetState" (struct.loadF StateMachine "smMem" (![ptrT] "s"))) (![slice.T byteT] "snap") (struct.loadF StateMachine "nextIndex" (![ptrT] "s"));;
    (for: (位: <>, #true); (位: <>, Skip) := 位: <>,
      (if: (slice.len (![slice.T byteT] "enc")) > #1
      then
        let: "opLen" := ref (zero_val uint64T) in
        let: ("$a0", "$a1") := marshal.ReadInt (![slice.T byteT] "enc") in
        "enc" <-[slice.T byteT] "$a1";;
        "opLen" <-[uint64T] "$a0";;
        let: "op" := ref_zero (slice.T byteT) in
        let: "$a0" := SliceSubslice byteT (![slice.T byteT] "enc") #0 (![uint64T] "opLen") in
        "op" <-[slice.T byteT] "$a0";;
        let: "n" := ref_zero intT in
        let: "$a0" := slice.len (![slice.T byteT] "enc") in
        "n" <-[intT] "$a0";;
        let: "$a0" := SliceSubslice byteT (![slice.T byteT] "enc") (![uint64T] "opLen") (![intT] "n") in
        "enc" <-[slice.T byteT] "$a0";;
        (struct.loadF InMemoryStateMachine "ApplyVolatile" (struct.loadF StateMachine "smMem" (![ptrT] "s"))) (![slice.T byteT] "op");;
        let: "$a0" := std.SumAssumeNoOverflow (struct.loadF StateMachine "nextIndex" (![ptrT] "s")) #1 in
        struct.storeF StateMachine "nextIndex" (![ptrT] "s") "$a0";;
        #()
      else Break);;
      #()).

(* XXX: putting this here because MakeServer takes nextIndex, epoch, and sealed
   as input, and the user of simplelog won't have access to the private fields
   index, epoch, etc.

   Maybe we should make those be a part of replica.StateMachine *)
Definition MakePbServer: val :=
  rec: "MakePbServer" "smMem" "fname" "confHosts" :=
    let: "s" := ref_zero ptrT in
    let: "$a0" := recoverStateMachine (![ptrT] "smMem") (![stringT] "fname") in
    "s" <-[ptrT] "$a0";;
    let: "sm" := ref_zero ptrT in
    let: "$a0" := struct.new replica.StateMachine [
      "StartApply" ::= (位: "op",
        return: (StateMachine__apply (![ptrT] "s") (![slice.T byteT] "op"))
        );
      "ApplyReadonly" ::= (位: "op",
        return: (StateMachine__applyReadonly (![ptrT] "s") (![slice.T byteT] "op"))
        );
      "SetStateAndUnseal" ::= (位: "snap" "nextIndex" "epoch",
        StateMachine__setStateAndUnseal (![ptrT] "s") (![slice.T byteT] "snap") (![uint64T] "nextIndex") (![uint64T] "epoch");;
        #()
        );
      "GetStateAndSeal" ::= (位: <>,
        return: (StateMachine__getStateAndSeal (![ptrT] "s"))
        )
    ] in
    "sm" <-[ptrT] "$a0";;
    return: (replica.MakeServer (![ptrT] "sm") (![slice.T uint64T] "confHosts") (struct.loadF StateMachine "nextIndex" (![ptrT] "s")) (struct.loadF StateMachine "epoch" (![ptrT] "s")) (struct.loadF StateMachine "sealed" (![ptrT] "s"))).
