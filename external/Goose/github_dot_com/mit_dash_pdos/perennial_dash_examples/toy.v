(* autogenerated from github.com/mit-pdos/perennial-examples/toy *)
From Perennial.goose_lang Require Import prelude.

From Perennial.goose_lang Require Import ffi.disk_prelude.

(* assumes a crash invariant with a guarantee that says a has an even block (the
   initial status doesn't matter); this should be sufficient to prove that this
   function does not panic *)
Definition consumeEvenBlock: val :=
  rec: "consumeEvenBlock" "d" "a" :=
    let: "b4" := NewSlice byteT disk.BlockSize in
    SliceSet byteT "b4" #0 #(U8 4);;
    disk.Write "a" "b4";;
    let: "b" := disk.Read "a" in
    (if: (SliceGet byteT "b" #0) â‰  #(U8 4)
    then
      Panic "unexpected value on disk";;
      #()
    else #()).

(* TransferEvenBlock assumes it is given ownership of a and that a initially has
   an even block (defined as the first byte being even).

   The spec is that TransferEvenBlock preserves that a has an even block (across
   crashes) and is safe (that is, the panic does not get triggered) *)
Definition TransferEvenBlock: val :=
  rec: "TransferEvenBlock" "d" "a" :=
    Fork (consumeEvenBlock "d" "a");;
    #().
