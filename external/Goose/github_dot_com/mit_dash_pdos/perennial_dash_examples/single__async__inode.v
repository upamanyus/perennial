(* autogenerated from github.com/mit-pdos/perennial-examples/single_async_inode *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_dot_com.mit_dash_pdos.perennial_dash_examples.alloc.
From Goose Require github_dot_com.mit_dash_pdos.perennial_dash_examples.async__inode.

From Perennial.goose_lang Require Import ffi.disk_prelude.

(* Example client of inode that has a single inode and doesn't share the
   allocator with anything else. *)

Definition SingleInode := struct.decl [
  "i" :: ptrT;
  "alloc" :: ptrT
].

(* Restore the SingleInode from disk

   sz should be the size of the disk to use *)
Definition Open: val :=
  rec: "Open" "d" "sz" :=
    let: "i" := async_inode.Open "d" #0 in
    let: "used" := NewMap uint64T (struct.t alloc.unit) #() in
    alloc.SetAdd "used" (async_inode.Inode__UsedBlocks "i");;
    let: "allocator" := alloc.New #1 ("sz" - #1) "used" in
    struct.new SingleInode [
      "i" ::= "i";
      "alloc" ::= "allocator"
    ].

Definition SingleInode__Read: val :=
  rec: "SingleInode__Read" "i" "off" :=
    async_inode.Inode__Read (struct.loadF SingleInode "i" "i") "off".

Definition SingleInode__Append: val :=
  rec: "SingleInode__Append" "i" "b" :=
    async_inode.Inode__Append (struct.loadF SingleInode "i" "i") "b".

Definition SingleInode__Flush: val :=
  rec: "SingleInode__Flush" "i" :=
    async_inode.Inode__Flush (struct.loadF SingleInode "i" "i") (struct.loadF SingleInode "alloc" "i").
