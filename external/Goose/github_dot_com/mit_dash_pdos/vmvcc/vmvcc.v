(* autogenerated from github.com/mit-pdos/vmvcc/vmvcc *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_dot_com.mit_dash_pdos.vmvcc.config.
From Goose Require github_dot_com.mit_dash_pdos.vmvcc.index.
From Goose Require github_dot_com.mit_dash_pdos.vmvcc.tid.
From Goose Require github_dot_com.mit_dash_pdos.vmvcc.txnsite.
From Goose Require github_dot_com.mit_dash_pdos.vmvcc.wrbuf.
From Perennial.goose_lang.trusted Require Import github_dot_com.mit_dash_pdos.vmvcc.trusted__proph.

From Perennial.goose_lang Require Import ffi.grove_prelude.

(* db.go *)

Definition DB := struct.decl [
  "latch" :: ptrT;
  "sid" :: uint64T;
  "sites" :: slice.T ptrT;
  "idx" :: ptrT;
  "proph" :: ProphIdT
].

Definition MkDB: val :=
  rec: "MkDB" <> :=
    let: "proph" := NewProph #() in
    let: "db" := struct.new DB [
      "proph" ::= "proph"
    ] in
    struct.storeF DB "latch" "db" (struct.alloc cfmutex.CFMutex (zero_val (struct.t cfmutex.CFMutex)));;
    struct.storeF DB "sites" "db" (NewSlice ptrT config.N_TXN_SITES);;
    tid.GenTID #0;;
    let: "i" := ref_to uint64T #0 in
    (for: (λ: <>, (![uint64T] "i") < config.N_TXN_SITES); (λ: <>, "i" <-[uint64T] ((![uint64T] "i") + #1)) := λ: <>,
      let: "site" := txnsite.MkTxnSite (![uint64T] "i") in
      SliceSet ptrT (struct.loadF DB "sites" "db") (![uint64T] "i") "site";;
      Continue);;
    struct.storeF DB "idx" "db" (index.MkIndex #());;
    "db".

(* Txn from txn.go *)

Definition Txn := struct.decl [
  "tid" :: uint64T;
  "site" :: ptrT;
  "wrbuf" :: ptrT;
  "idx" :: ptrT;
  "proph" :: ProphIdT
].

Definition DB__NewTxn: val :=
  rec: "DB__NewTxn" "db" :=
    cfmutex.CFMutex__Lock (struct.loadF DB "latch" "db");;
    let: "txn" := struct.new Txn [
      "proph" ::= struct.loadF DB "proph" "db"
    ] in
    struct.storeF Txn "site" "txn" (SliceGet ptrT (struct.loadF DB "sites" "db") (struct.loadF DB "sid" "db"));;
    struct.storeF Txn "wrbuf" "txn" (wrbuf.MkWrBuf #());;
    struct.storeF Txn "idx" "txn" (struct.loadF DB "idx" "db");;
    struct.storeF DB "sid" "db" ((struct.loadF DB "sid" "db") + #1);;
    (if: (struct.loadF DB "sid" "db") ≥ config.N_TXN_SITES
    then struct.storeF DB "sid" "db" #0
    else #());;
    cfmutex.CFMutex__Unlock (struct.loadF DB "latch" "db");;
    "txn".

(* @GetSafeTS returns a lower bound on the active/future transaction IDs. *)
Definition DB__getSafeTS: val :=
  rec: "DB__getSafeTS" "db" :=
    let: "min" := ref_to uint64T config.TID_SENTINEL in
    let: "sid" := ref_to uint64T #0 in
    (for: (λ: <>, (![uint64T] "sid") < config.N_TXN_SITES); (λ: <>, "sid" <-[uint64T] ((![uint64T] "sid") + #1)) := λ: <>,
      let: "site" := SliceGet ptrT (struct.loadF DB "sites" "db") (![uint64T] "sid") in
      let: "tid" := txnsite.TxnSite__GetSafeTS "site" in
      (if: "tid" < (![uint64T] "min")
      then
        "min" <-[uint64T] "tid";;
        Continue
      else Continue));;
    ![uint64T] "min".

Definition DB__gc: val :=
  rec: "DB__gc" "db" :=
    let: "tidMin" := DB__getSafeTS "db" in
    (if: "tidMin" < config.TID_SENTINEL
    then
      index.Index__DoGC (struct.loadF DB "idx" "db") "tidMin";;
      #()
    else #()).

Definition DB__ActivateGC: val :=
  rec: "DB__ActivateGC" "db" :=
    Fork (Skip;;
          (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
            DB__gc "db";;
            time.Sleep (#1 * #1000000);;
            Continue));;
    #().

Definition Txn__begin: val :=
  rec: "Txn__begin" "txn" :=
    let: "tid" := txnsite.TxnSite__Activate (struct.loadF Txn "site" "txn") in
    struct.storeF Txn "tid" "txn" "tid";;
    wrbuf.WrBuf__Clear (struct.loadF Txn "wrbuf" "txn");;
    #().

Definition Txn__abort: val :=
  rec: "Txn__abort" "txn" :=
    trusted_proph.ResolveAbort (struct.loadF Txn "proph" "txn") (struct.loadF Txn "tid" "txn");;
    txnsite.TxnSite__Deactivate (struct.loadF Txn "site" "txn") (struct.loadF Txn "tid" "txn");;
    #().

Definition Txn__acquire: val :=
  rec: "Txn__acquire" "txn" :=
    let: "ok" := wrbuf.WrBuf__OpenTuples (struct.loadF Txn "wrbuf" "txn") (struct.loadF Txn "tid" "txn") (struct.loadF Txn "idx" "txn") in
    "ok".

Definition Txn__commit: val :=
  rec: "Txn__commit" "txn" :=
    trusted_proph.ResolveCommit (struct.loadF Txn "proph" "txn") (struct.loadF Txn "tid" "txn") (struct.loadF Txn "wrbuf" "txn");;
    wrbuf.WrBuf__UpdateTuples (struct.loadF Txn "wrbuf" "txn") (struct.loadF Txn "tid" "txn");;
    txnsite.TxnSite__Deactivate (struct.loadF Txn "site" "txn") (struct.loadF Txn "tid" "txn");;
    #().

Definition Txn__Run: val :=
  rec: "Txn__Run" "txn" "body" :=
    Txn__begin "txn";;
    let: "cmt" := "body" "txn" in
    (if: (~ "cmt")
    then
      Txn__abort "txn";;
      #false
    else
      let: "ok" := Txn__acquire "txn" in
      (if: (~ "ok")
      then
        Txn__abort "txn";;
        #false
      else
        Txn__commit "txn";;
        #true)).

Definition DB__Run: val :=
  rec: "DB__Run" "db" "body" :=
    let: "txn" := DB__NewTxn "db" in
    Txn__Run "txn" "body".

(* txn.go *)

Definition Txn__Write: val :=
  rec: "Txn__Write" "txn" "key" "val" :=
    let: "wrbuf" := struct.loadF Txn "wrbuf" "txn" in
    wrbuf.WrBuf__Put "wrbuf" "key" "val";;
    #().

Definition Txn__Delete: val :=
  rec: "Txn__Delete" "txn" "key" :=
    let: "wrbuf" := struct.loadF Txn "wrbuf" "txn" in
    wrbuf.WrBuf__Delete "wrbuf" "key";;
    #true.

Definition Txn__Read: val :=
  rec: "Txn__Read" "txn" "key" :=
    let: "wrbuf" := struct.loadF Txn "wrbuf" "txn" in
    let: (("valb", "wr"), "found") := wrbuf.WrBuf__Lookup "wrbuf" "key" in
    (if: "found"
    then ("valb", "wr")
    else
      let: "idx" := struct.loadF Txn "idx" "txn" in
      let: "tuple" := index.Index__GetTuple "idx" "key" in
      tuple.Tuple__ReadWait "tuple" (struct.loadF Txn "tid" "txn");;
      trusted_proph.ResolveRead (struct.loadF Txn "proph" "txn") (struct.loadF Txn "tid" "txn") "key";;
      let: ("val", "found") := tuple.Tuple__ReadVersion "tuple" (struct.loadF Txn "tid" "txn") in
      ("val", "found")).
