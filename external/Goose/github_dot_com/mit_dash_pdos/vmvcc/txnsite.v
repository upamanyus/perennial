(* autogenerated from github.com/mit-pdos/vmvcc/txnsite *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_dot_com.mit_dash_pdos.vmvcc.tid.

From Perennial.goose_lang Require Import ffi.grove_prelude.

Definition TxnSite := struct.decl [
  "latch" :: ptrT;
  "sid" :: uint64T;
  "tids" :: slice.T uint64T;
  "padding" :: arrayT uint64T
].

Definition MkTxnSite: val :=
  rec: "MkTxnSite" "sid" :=
    let: "site" := struct.alloc TxnSite (zero_val (struct.t TxnSite)) in
    struct.storeF TxnSite "latch" "site" (struct.alloc cfmutex.CFMutex (zero_val (struct.t cfmutex.CFMutex)));;
    struct.storeF TxnSite "tids" "site" (NewSliceWithCap uint64T #0 #8);;
    struct.storeF TxnSite "sid" "site" "sid";;
    "site".

(* @activate adds @tid to the set of active transaction IDs. *)
Definition TxnSite__Activate: val :=
  rec: "TxnSite__Activate" "site" :=
    cfmutex.CFMutex__Lock (struct.loadF TxnSite "latch" "site");;
    let: "t" := ref (zero_val uint64T) in
    "t" <-[uint64T] (tid.GenTID (struct.loadF TxnSite "sid" "site"));;
    control.impl.Assume ((![uint64T] "t") < #18446744073709551615);;
    struct.storeF TxnSite "tids" "site" (SliceAppend uint64T (struct.loadF TxnSite "tids" "site") (![uint64T] "t"));;
    cfmutex.CFMutex__Unlock (struct.loadF TxnSite "latch" "site");;
    ![uint64T] "t".

Definition findTID: val :=
  rec: "findTID" "tid" "tids" :=
    let: "idx" := ref_to uint64T #0 in
    Skip;;
    (for: (λ: <>, "tid" ≠ (SliceGet uint64T "tids" (![uint64T] "idx"))); (λ: <>, Skip) := λ: <>,
      "idx" <-[uint64T] ((![uint64T] "idx") + #1);;
      Continue);;
    ![uint64T] "idx".

Definition swapWithEnd: val :=
  rec: "swapWithEnd" "xs" "i" :=
    let: "tmp" := SliceGet uint64T "xs" ((slice.len "xs") - #1) in
    SliceSet uint64T "xs" ((slice.len "xs") - #1) (SliceGet uint64T "xs" "i");;
    SliceSet uint64T "xs" "i" "tmp";;
    #().

(* @deactivate removes @tid from the set of active transaction IDs. *)
Definition TxnSite__Deactivate: val :=
  rec: "TxnSite__Deactivate" "site" "tid" :=
    cfmutex.CFMutex__Lock (struct.loadF TxnSite "latch" "site");;
    let: "idx" := findTID "tid" (struct.loadF TxnSite "tids" "site") in
    swapWithEnd (struct.loadF TxnSite "tids" "site") "idx";;
    struct.storeF TxnSite "tids" "site" (SliceTake (struct.loadF TxnSite "tids" "site") ((slice.len (struct.loadF TxnSite "tids" "site")) - #1));;
    cfmutex.CFMutex__Unlock (struct.loadF TxnSite "latch" "site");;
    #().

(* @GetSafeTS returns a per-site lower bound on the active/future transaction
   IDs. *)
Definition TxnSite__GetSafeTS: val :=
  rec: "TxnSite__GetSafeTS" "site" :=
    cfmutex.CFMutex__Lock (struct.loadF TxnSite "latch" "site");;
    let: "tidnew" := ref (zero_val uint64T) in
    "tidnew" <-[uint64T] (tid.GenTID (struct.loadF TxnSite "sid" "site"));;
    control.impl.Assume ((![uint64T] "tidnew") < #18446744073709551615);;
    let: "tidmin" := ref_to uint64T (![uint64T] "tidnew") in
    ForSlice uint64T <> "tid" (struct.loadF TxnSite "tids" "site")
      ((if: "tid" < (![uint64T] "tidmin")
      then "tidmin" <-[uint64T] "tid"
      else #()));;
    cfmutex.CFMutex__Unlock (struct.loadF TxnSite "latch" "site");;
    ![uint64T] "tidmin".
